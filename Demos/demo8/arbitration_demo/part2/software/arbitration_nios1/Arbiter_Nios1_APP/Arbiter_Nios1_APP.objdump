
Arbiter_Nios1_APP.elf:     file format elf32-littlenios2
Arbiter_Nios1_APP.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x000013d8 memsz 0x000013d8 flags r-x
    LOAD off    0x000023f8 vaddr 0x000053f8 paddr 0x000056d4 align 2**12
         filesz 0x000002dc memsz 0x000002dc flags rw-
    LOAD off    0x000029b0 vaddr 0x000059b0 paddr 0x000059b0 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00004020  00004020  000026d4  2**0
                  CONTENTS
  2 .text         0000137c  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000005c  0000539c  0000539c  0000239c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002dc  000053f8  000056d4  000023f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  000059b0  000059b0  000029b0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000059c0  000059c0  000026d4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000026d4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000410  00000000  00000000  000026f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00004821  00000000  00000000  00002b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001a04  00000000  00000000  00007329  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001c99  00000000  00000000  00008d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000770  00000000  00000000  0000a9c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000012b0  00000000  00000000  0000b138  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000004a6  00000000  00000000  0000c3e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000c890  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000b0  00000000  00000000  0000c8a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000de01  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000de04  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000de10  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000de11  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0000de12  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000de1d  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0000de28  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0000de33  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000041  00000000  00000000  0000de3e  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0006b66f  00000000  00000000  0000de7f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004020 l    d  .text	00000000 .text
0000539c l    d  .rodata	00000000 .rodata
000053f8 l    d  .rwdata	00000000 .rwdata
000059b0 l    d  .bss	00000000 .bss
000059c0 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Arbiter_Nios1_APP_bsp//obj/HAL/src/crt0.o
00004058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 arbitration_nios1.c
00000000 l    df *ABS*	00000000 alt_load.c
00004188 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000042f0 l     F .text	00000034 alt_dev_reg
000053f8 l     O .rwdata	0000002c jtag_uart_1
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
000045d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00004704 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00004730 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000048f0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00004a50 l     F .text	0000003c alt_get_errno
00004a8c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 impure.c
000055cc l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00004274 g     F .text	0000007c alt_main
000056d4 g       *ABS*	00000000 __flash_rwdata_start
00004d58 g     F .text	00000024 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
000059bc g     O .bss	00000004 errno
000059b4 g     O .bss	00000004 alt_argv
0000d6ac g       *ABS*	00000000 _gp
0000544c g     O .rwdata	00000180 alt_fd_list
00004d7c g     F .text	00000090 alt_find_dev
000049d4 g     F .text	0000007c alt_io_redirect
0000539c g       *ABS*	00000000 __DTOR_END__
00004450 g     F .text	000000ec altera_avalon_jtag_uart_read
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000056c4 g     O .rwdata	00000004 alt_max_fd
000056cc g     O .rwdata	00000004 _global_impure_ptr
000059c0 g       *ABS*	00000000 __bss_end
00005424 g     O .rwdata	00000028 alt_dev_null
000046e4 g     F .text	00000020 alt_dcache_flush_all
000056d4 g       *ABS*	00000000 __ram_rwdata_end
000056bc g     O .rwdata	00000008 alt_dev_list
000053f8 g       *ABS*	00000000 __ram_rodata_end
000059c0 g       *ABS*	00000000 end
0000539c g       *ABS*	00000000 __CTOR_LIST__
00008000 g       *ABS*	00000000 __alt_stack_pointer
0000453c g     F .text	00000094 altera_avalon_jtag_uart_write
000056ac g     O .rwdata	00000004 BridgePtr
000051b0 g     F .text	00000190 __call_exitprocs
00004020 g     F .text	0000003c _start
0000435c g     F .text	00000034 alt_sys_init
00005058 g     F .text	00000158 __register_exitproc
00005340 g     F .text	00000028 .hidden __mulsi3
000053f8 g       *ABS*	00000000 __ram_rwdata_start
0000539c g       *ABS*	00000000 __ram_rodata_start
00004390 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00004f14 g     F .text	000000c4 alt_get_fd
0000500c g     F .text	00000030 memcmp
000059c0 g       *ABS*	00000000 __alt_stack_base
000056b0 g     O .rwdata	00000004 JtagUartPtr
00004e0c g     F .text	00000108 alt_find_file
0000476c g     F .text	000000a4 alt_dev_llist_insert
000059b0 g       *ABS*	00000000 __bss_start
000040c0 g     F .text	000000c8 main
000059b8 g     O .bss	00000004 alt_envp
000043f0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000405c g     F .text	00000064 jtag_display
000056c8 g     O .rwdata	00000004 alt_errno
0000539c g       *ABS*	00000000 __CTOR_END__
0000539c g       *ABS*	00000000 __flash_rodata_start
0000539c g       *ABS*	00000000 __DTOR_LIST__
00004324 g     F .text	00000038 alt_irq_init
00004cd4 g     F .text	00000084 alt_release_fd
00004fd8 g     F .text	00000014 atexit
000056d0 g     O .rwdata	00000004 _impure_ptr
000059b0 g     O .bss	00000004 alt_argc
00004870 g     F .text	00000060 _do_dtors
000056b4 g     O .rwdata	00000008 alt_fs_list
00004020 g       *ABS*	00000000 __ram_exceptions_start
000056d4 g       *ABS*	00000000 _edata
000059c0 g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
00004fec g     F .text	00000020 exit
00008000 g       *ABS*	00000000 __alt_data_end
00005368 g     F .text	00000034 _exit
0000503c g     F .text	0000001c strlen
00004b78 g     F .text	0000015c open
000048d0 g     F .text	00000020 alt_icache_flush_all
00004810 g     F .text	00000060 _do_ctors
0000460c g     F .text	000000d8 close
000041f0 g     F .text	00000084 alt_load



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08500814 	ori	at,at,16416
    jmp r1
    4008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00004020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4024:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
    4028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    402c:	d6b5ab14 	ori	gp,gp,54956
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4034:	10966c14 	ori	r2,r2,22960

    movhi r3, %hi(__bss_end)
    4038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    403c:	18d67014 	ori	r3,r3,22976

    beq r2, r3, 1f
    4040:	10c00326 	beq	r2,r3,4050 <_start+0x30>

0:
    stw zero, (r2)
    4044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    404c:	10fffd36 	bltu	r2,r3,4044 <_gp+0xffff6998>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4050:	00041f00 	call	41f0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4054:	00042740 	call	4274 <alt_main>

00004058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4058:	003fff06 	br	4058 <_gp+0xffff69ac>

0000405c <jtag_display>:
// OUTPUTS:
//    none
// RETURN:
//    none
//*****************************************************************************
void jtag_display(uint8* prompt, uint32 count) {
    405c:	defffc04 	addi	sp,sp,-16
    4060:	df000315 	stw	fp,12(sp)
    4064:	df000304 	addi	fp,sp,12
    4068:	e13ffe15 	stw	r4,-8(fp)
    406c:	e17fff15 	stw	r5,-4(fp)
	uint32 i;

	for (i = 0; i < count; i++) {
    4070:	e03ffd15 	stw	zero,-12(fp)
    4074:	00000a06 	br	40a0 <jtag_display+0x44>
		*JtagUartPtr = prompt[i];
    4078:	d0a00117 	ldw	r2,-32764(gp)
    407c:	e13ffe17 	ldw	r4,-8(fp)
    4080:	e0fffd17 	ldw	r3,-12(fp)
    4084:	20c7883a 	add	r3,r4,r3
    4088:	18c00003 	ldbu	r3,0(r3)
    408c:	18c03fcc 	andi	r3,r3,255
    4090:	10c00015 	stw	r3,0(r2)
//    none
//*****************************************************************************
void jtag_display(uint8* prompt, uint32 count) {
	uint32 i;

	for (i = 0; i < count; i++) {
    4094:	e0bffd17 	ldw	r2,-12(fp)
    4098:	10800044 	addi	r2,r2,1
    409c:	e0bffd15 	stw	r2,-12(fp)
    40a0:	e0fffd17 	ldw	r3,-12(fp)
    40a4:	e0bfff17 	ldw	r2,-4(fp)
    40a8:	18bff336 	bltu	r3,r2,4078 <_gp+0xffff69cc>
		*JtagUartPtr = prompt[i];
	} /* for */
} /* jtag_display */
    40ac:	0001883a 	nop
    40b0:	e037883a 	mov	sp,fp
    40b4:	df000017 	ldw	fp,0(sp)
    40b8:	dec00104 	addi	sp,sp,4
    40bc:	f800283a 	ret

000040c0 <main>:
//*****************************************************************************
//                              MAIN
//*****************************************************************************

int main(void)
{
    40c0:	defffb04 	addi	sp,sp,-20
    40c4:	dfc00415 	stw	ra,16(sp)
    40c8:	df000315 	stw	fp,12(sp)
    40cc:	df000304 	addi	fp,sp,12
int wspace, rv;   //these are for parsing the register data from the JTAG
char character;

jtag_display((uint8*) "Welcome to ESD I chat room for CPU 1", 36);
    40d0:	01400904 	movi	r5,36
    40d4:	01000034 	movhi	r4,0
    40d8:	2114e704 	addi	r4,r4,21404
    40dc:	000405c0 	call	405c <jtag_display>
while (1) //run continuous loop
  {
    //poll the receive Uart to see if a character has been entered
    //if a valid character has been read, RV bit (bit 15)  = 1;

      rv = *JtagUartPtr;
    40e0:	d0a00117 	ldw	r2,-32764(gp)
    40e4:	10800017 	ldw	r2,0(r2)
    40e8:	e0bffd15 	stw	r2,-12(fp)
	  if ((rv & 0x00008000)!= 0)
    40ec:	e0bffd17 	ldw	r2,-12(fp)
    40f0:	10a0000c 	andi	r2,r2,32768
    40f4:	10001426 	beq	r2,zero,4148 <main+0x88>
		//read character
	  {
		    
	     character = rv & 0x000000FF;
    40f8:	e0bffd17 	ldw	r2,-12(fp)
    40fc:	e0bffe05 	stb	r2,-8(fp)

	     //echo it if transmitter is ready
         wspace = *(JtagUartPtr + 1);
    4100:	d0a00117 	ldw	r2,-32764(gp)
    4104:	10800104 	addi	r2,r2,4
    4108:	10800017 	ldw	r2,0(r2)
    410c:	e0bfff15 	stw	r2,-4(fp)
	     if ((wspace & 0xffff0000) != 0) //if transmitter is ready
    4110:	e0bfff17 	ldw	r2,-4(fp)
    4114:	10bfffec 	andhi	r2,r2,65535
    4118:	10000b26 	beq	r2,zero,4148 <main+0x88>
	       {
	         *JtagUartPtr = character;  //send character to uart
    411c:	d0a00117 	ldw	r2,-32764(gp)
    4120:	e0fffe07 	ldb	r3,-8(fp)
    4124:	10c00015 	stw	r3,0(r2)
	         //also store character and set flag;
	         *(BridgePtr + 8) = character;
    4128:	d0a00017 	ldw	r2,-32768(gp)
    412c:	10800404 	addi	r2,r2,16
    4130:	e0fffe07 	ldb	r3,-8(fp)
    4134:	10c0000d 	sth	r3,0(r2)

	         *(BridgePtr + 12) = 1;
    4138:	d0a00017 	ldw	r2,-32768(gp)
    413c:	10800604 	addi	r2,r2,24
    4140:	00c00044 	movi	r3,1
    4144:	10c0000d 	sth	r3,0(r2)
	        }
	   }

        //now read flag from other CPU
       if (*(BridgePtr + 4) == 1)
    4148:	d0a00017 	ldw	r2,-32768(gp)
    414c:	10800204 	addi	r2,r2,8
    4150:	1080000b 	ldhu	r2,0(r2)
    4154:	10bfffcc 	andi	r2,r2,65535
    4158:	10800058 	cmpnei	r2,r2,1
    415c:	103fe01e 	bne	r2,zero,40e0 <_gp+0xffff6a34>
       {
    	   *(BridgePtr + 4) = 0; //clear flag
    4160:	d0a00017 	ldw	r2,-32768(gp)
    4164:	10800204 	addi	r2,r2,8
    4168:	1000000d 	sth	zero,0(r2)
    	    character = *BridgePtr;  //get the character
    416c:	d0a00017 	ldw	r2,-32768(gp)
    4170:	1080000b 	ldhu	r2,0(r2)
    4174:	e0bffe05 	stb	r2,-8(fp)

	        //if there is a character, print it
	        *(JtagUartPtr) = character;  //send character to uart
    4178:	d0a00117 	ldw	r2,-32764(gp)
    417c:	e0fffe07 	ldb	r3,-8(fp)
    4180:	10c00015 	stw	r3,0(r2)
	   }
   }
    4184:	003fd606 	br	40e0 <_gp+0xffff6a34>

00004188 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    4188:	defffc04 	addi	sp,sp,-16
    418c:	df000315 	stw	fp,12(sp)
    4190:	df000304 	addi	fp,sp,12
    4194:	e13ffd15 	stw	r4,-12(fp)
    4198:	e17ffe15 	stw	r5,-8(fp)
    419c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    41a0:	e0fffe17 	ldw	r3,-8(fp)
    41a4:	e0bffd17 	ldw	r2,-12(fp)
    41a8:	18800c26 	beq	r3,r2,41dc <alt_load_section+0x54>
  {
    while( to != end )
    41ac:	00000806 	br	41d0 <alt_load_section+0x48>
    {
      *to++ = *from++;
    41b0:	e0bffe17 	ldw	r2,-8(fp)
    41b4:	10c00104 	addi	r3,r2,4
    41b8:	e0fffe15 	stw	r3,-8(fp)
    41bc:	e0fffd17 	ldw	r3,-12(fp)
    41c0:	19000104 	addi	r4,r3,4
    41c4:	e13ffd15 	stw	r4,-12(fp)
    41c8:	18c00017 	ldw	r3,0(r3)
    41cc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    41d0:	e0fffe17 	ldw	r3,-8(fp)
    41d4:	e0bfff17 	ldw	r2,-4(fp)
    41d8:	18bff51e 	bne	r3,r2,41b0 <_gp+0xffff6b04>
    {
      *to++ = *from++;
    }
  }
}
    41dc:	0001883a 	nop
    41e0:	e037883a 	mov	sp,fp
    41e4:	df000017 	ldw	fp,0(sp)
    41e8:	dec00104 	addi	sp,sp,4
    41ec:	f800283a 	ret

000041f0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    41f0:	defffe04 	addi	sp,sp,-8
    41f4:	dfc00115 	stw	ra,4(sp)
    41f8:	df000015 	stw	fp,0(sp)
    41fc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    4200:	01800034 	movhi	r6,0
    4204:	3195b504 	addi	r6,r6,22228
    4208:	01400034 	movhi	r5,0
    420c:	2954fe04 	addi	r5,r5,21496
    4210:	01000034 	movhi	r4,0
    4214:	2115b504 	addi	r4,r4,22228
    4218:	00041880 	call	4188 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    421c:	01800034 	movhi	r6,0
    4220:	31900804 	addi	r6,r6,16416
    4224:	01400034 	movhi	r5,0
    4228:	29500804 	addi	r5,r5,16416
    422c:	01000034 	movhi	r4,0
    4230:	21100804 	addi	r4,r4,16416
    4234:	00041880 	call	4188 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    4238:	01800034 	movhi	r6,0
    423c:	3194fe04 	addi	r6,r6,21496
    4240:	01400034 	movhi	r5,0
    4244:	2954e704 	addi	r5,r5,21404
    4248:	01000034 	movhi	r4,0
    424c:	2114e704 	addi	r4,r4,21404
    4250:	00041880 	call	4188 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    4254:	00046e40 	call	46e4 <alt_dcache_flush_all>
  alt_icache_flush_all();
    4258:	00048d00 	call	48d0 <alt_icache_flush_all>
}
    425c:	0001883a 	nop
    4260:	e037883a 	mov	sp,fp
    4264:	dfc00117 	ldw	ra,4(sp)
    4268:	df000017 	ldw	fp,0(sp)
    426c:	dec00204 	addi	sp,sp,8
    4270:	f800283a 	ret

00004274 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4274:	defffd04 	addi	sp,sp,-12
    4278:	dfc00215 	stw	ra,8(sp)
    427c:	df000115 	stw	fp,4(sp)
    4280:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4284:	0009883a 	mov	r4,zero
    4288:	00043240 	call	4324 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    428c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    4290:	000435c0 	call	435c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    4294:	01800034 	movhi	r6,0
    4298:	3194f104 	addi	r6,r6,21444
    429c:	01400034 	movhi	r5,0
    42a0:	2954f104 	addi	r5,r5,21444
    42a4:	01000034 	movhi	r4,0
    42a8:	2114f104 	addi	r4,r4,21444
    42ac:	00049d40 	call	49d4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    42b0:	00048100 	call	4810 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    42b4:	01000034 	movhi	r4,0
    42b8:	21121c04 	addi	r4,r4,18544
    42bc:	0004fd80 	call	4fd8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    42c0:	d0a0c117 	ldw	r2,-31996(gp)
    42c4:	d0e0c217 	ldw	r3,-31992(gp)
    42c8:	d120c317 	ldw	r4,-31988(gp)
    42cc:	200d883a 	mov	r6,r4
    42d0:	180b883a 	mov	r5,r3
    42d4:	1009883a 	mov	r4,r2
    42d8:	00040c00 	call	40c0 <main>
    42dc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    42e0:	01000044 	movi	r4,1
    42e4:	000460c0 	call	460c <close>
  exit (result);
    42e8:	e13fff17 	ldw	r4,-4(fp)
    42ec:	0004fec0 	call	4fec <exit>

000042f0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    42f0:	defffd04 	addi	sp,sp,-12
    42f4:	dfc00215 	stw	ra,8(sp)
    42f8:	df000115 	stw	fp,4(sp)
    42fc:	df000104 	addi	fp,sp,4
    4300:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    4304:	d1600404 	addi	r5,gp,-32752
    4308:	e13fff17 	ldw	r4,-4(fp)
    430c:	000476c0 	call	476c <alt_dev_llist_insert>
}
    4310:	e037883a 	mov	sp,fp
    4314:	dfc00117 	ldw	ra,4(sp)
    4318:	df000017 	ldw	fp,0(sp)
    431c:	dec00204 	addi	sp,sp,8
    4320:	f800283a 	ret

00004324 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    4324:	defffd04 	addi	sp,sp,-12
    4328:	dfc00215 	stw	ra,8(sp)
    432c:	df000115 	stw	fp,4(sp)
    4330:	df000104 	addi	fp,sp,4
    4334:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_1, nios2_gen2_1);
    4338:	0004d580 	call	4d58 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    433c:	00800044 	movi	r2,1
    4340:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    4344:	0001883a 	nop
    4348:	e037883a 	mov	sp,fp
    434c:	dfc00117 	ldw	ra,4(sp)
    4350:	df000017 	ldw	fp,0(sp)
    4354:	dec00204 	addi	sp,sp,8
    4358:	f800283a 	ret

0000435c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    435c:	defffe04 	addi	sp,sp,-8
    4360:	dfc00115 	stw	ra,4(sp)
    4364:	df000015 	stw	fp,0(sp)
    4368:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1, jtag_uart_1);
    436c:	01000034 	movhi	r4,0
    4370:	2114fe04 	addi	r4,r4,21496
    4374:	00042f00 	call	42f0 <alt_dev_reg>
}
    4378:	0001883a 	nop
    437c:	e037883a 	mov	sp,fp
    4380:	dfc00117 	ldw	ra,4(sp)
    4384:	df000017 	ldw	fp,0(sp)
    4388:	dec00204 	addi	sp,sp,8
    438c:	f800283a 	ret

00004390 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    4390:	defffa04 	addi	sp,sp,-24
    4394:	dfc00515 	stw	ra,20(sp)
    4398:	df000415 	stw	fp,16(sp)
    439c:	df000404 	addi	fp,sp,16
    43a0:	e13ffd15 	stw	r4,-12(fp)
    43a4:	e17ffe15 	stw	r5,-8(fp)
    43a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    43ac:	e0bffd17 	ldw	r2,-12(fp)
    43b0:	10800017 	ldw	r2,0(r2)
    43b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    43b8:	e0bffc17 	ldw	r2,-16(fp)
    43bc:	10c00a04 	addi	r3,r2,40
    43c0:	e0bffd17 	ldw	r2,-12(fp)
    43c4:	10800217 	ldw	r2,8(r2)
    43c8:	100f883a 	mov	r7,r2
    43cc:	e1bfff17 	ldw	r6,-4(fp)
    43d0:	e17ffe17 	ldw	r5,-8(fp)
    43d4:	1809883a 	mov	r4,r3
    43d8:	00044500 	call	4450 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    43dc:	e037883a 	mov	sp,fp
    43e0:	dfc00117 	ldw	ra,4(sp)
    43e4:	df000017 	ldw	fp,0(sp)
    43e8:	dec00204 	addi	sp,sp,8
    43ec:	f800283a 	ret

000043f0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    43f0:	defffa04 	addi	sp,sp,-24
    43f4:	dfc00515 	stw	ra,20(sp)
    43f8:	df000415 	stw	fp,16(sp)
    43fc:	df000404 	addi	fp,sp,16
    4400:	e13ffd15 	stw	r4,-12(fp)
    4404:	e17ffe15 	stw	r5,-8(fp)
    4408:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    440c:	e0bffd17 	ldw	r2,-12(fp)
    4410:	10800017 	ldw	r2,0(r2)
    4414:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    4418:	e0bffc17 	ldw	r2,-16(fp)
    441c:	10c00a04 	addi	r3,r2,40
    4420:	e0bffd17 	ldw	r2,-12(fp)
    4424:	10800217 	ldw	r2,8(r2)
    4428:	100f883a 	mov	r7,r2
    442c:	e1bfff17 	ldw	r6,-4(fp)
    4430:	e17ffe17 	ldw	r5,-8(fp)
    4434:	1809883a 	mov	r4,r3
    4438:	000453c0 	call	453c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    443c:	e037883a 	mov	sp,fp
    4440:	dfc00117 	ldw	ra,4(sp)
    4444:	df000017 	ldw	fp,0(sp)
    4448:	dec00204 	addi	sp,sp,8
    444c:	f800283a 	ret

00004450 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    4450:	defff704 	addi	sp,sp,-36
    4454:	df000815 	stw	fp,32(sp)
    4458:	df000804 	addi	fp,sp,32
    445c:	e13ffc15 	stw	r4,-16(fp)
    4460:	e17ffd15 	stw	r5,-12(fp)
    4464:	e1bffe15 	stw	r6,-8(fp)
    4468:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    446c:	e0bffc17 	ldw	r2,-16(fp)
    4470:	10800017 	ldw	r2,0(r2)
    4474:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    4478:	e0bffd17 	ldw	r2,-12(fp)
    447c:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    4480:	e0bffe17 	ldw	r2,-8(fp)
    4484:	e0fffd17 	ldw	r3,-12(fp)
    4488:	1885883a 	add	r2,r3,r2
    448c:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    4490:	00001206 	br	44dc <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    4494:	e0bff917 	ldw	r2,-28(fp)
    4498:	10800037 	ldwio	r2,0(r2)
    449c:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    44a0:	e0bffb17 	ldw	r2,-20(fp)
    44a4:	10a0000c 	andi	r2,r2,32768
    44a8:	10000626 	beq	r2,zero,44c4 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    44ac:	e0bff817 	ldw	r2,-32(fp)
    44b0:	10c00044 	addi	r3,r2,1
    44b4:	e0fff815 	stw	r3,-32(fp)
    44b8:	e0fffb17 	ldw	r3,-20(fp)
    44bc:	10c00005 	stb	r3,0(r2)
    44c0:	00000606 	br	44dc <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    44c4:	e0fff817 	ldw	r3,-32(fp)
    44c8:	e0bffd17 	ldw	r2,-12(fp)
    44cc:	1880071e 	bne	r3,r2,44ec <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    44d0:	e0bfff17 	ldw	r2,-4(fp)
    44d4:	1090000c 	andi	r2,r2,16384
    44d8:	1000061e 	bne	r2,zero,44f4 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    44dc:	e0fff817 	ldw	r3,-32(fp)
    44e0:	e0bffa17 	ldw	r2,-24(fp)
    44e4:	18bfeb36 	bltu	r3,r2,4494 <_gp+0xffff6de8>
    44e8:	00000306 	br	44f8 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    44ec:	0001883a 	nop
    44f0:	00000106 	br	44f8 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    44f4:	0001883a 	nop
    
  }

  if (ptr != buffer)
    44f8:	e0fff817 	ldw	r3,-32(fp)
    44fc:	e0bffd17 	ldw	r2,-12(fp)
    4500:	18800426 	beq	r3,r2,4514 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    4504:	e0fff817 	ldw	r3,-32(fp)
    4508:	e0bffd17 	ldw	r2,-12(fp)
    450c:	1885c83a 	sub	r2,r3,r2
    4510:	00000606 	br	452c <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    4514:	e0bfff17 	ldw	r2,-4(fp)
    4518:	1090000c 	andi	r2,r2,16384
    451c:	10000226 	beq	r2,zero,4528 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    4520:	00bffd44 	movi	r2,-11
    4524:	00000106 	br	452c <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    4528:	00bffec4 	movi	r2,-5
}
    452c:	e037883a 	mov	sp,fp
    4530:	df000017 	ldw	fp,0(sp)
    4534:	dec00104 	addi	sp,sp,4
    4538:	f800283a 	ret

0000453c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    453c:	defff904 	addi	sp,sp,-28
    4540:	df000615 	stw	fp,24(sp)
    4544:	df000604 	addi	fp,sp,24
    4548:	e13ffc15 	stw	r4,-16(fp)
    454c:	e17ffd15 	stw	r5,-12(fp)
    4550:	e1bffe15 	stw	r6,-8(fp)
    4554:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    4558:	e0bffc17 	ldw	r2,-16(fp)
    455c:	10800017 	ldw	r2,0(r2)
    4560:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    4564:	e0bffe17 	ldw	r2,-8(fp)
    4568:	e0fffd17 	ldw	r3,-12(fp)
    456c:	1885883a 	add	r2,r3,r2
    4570:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    4574:	00000e06 	br	45b0 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    4578:	e0bffa17 	ldw	r2,-24(fp)
    457c:	10800104 	addi	r2,r2,4
    4580:	10800037 	ldwio	r2,0(r2)
    4584:	10bfffec 	andhi	r2,r2,65535
    4588:	10000926 	beq	r2,zero,45b0 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    458c:	e0fffa17 	ldw	r3,-24(fp)
    4590:	e0bffd17 	ldw	r2,-12(fp)
    4594:	11000044 	addi	r4,r2,1
    4598:	e13ffd15 	stw	r4,-12(fp)
    459c:	10800003 	ldbu	r2,0(r2)
    45a0:	10803fcc 	andi	r2,r2,255
    45a4:	1080201c 	xori	r2,r2,128
    45a8:	10bfe004 	addi	r2,r2,-128
    45ac:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    45b0:	e0fffd17 	ldw	r3,-12(fp)
    45b4:	e0bffb17 	ldw	r2,-20(fp)
    45b8:	18bfef36 	bltu	r3,r2,4578 <_gp+0xffff6ecc>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    45bc:	e0bffe17 	ldw	r2,-8(fp)
}
    45c0:	e037883a 	mov	sp,fp
    45c4:	df000017 	ldw	fp,0(sp)
    45c8:	dec00104 	addi	sp,sp,4
    45cc:	f800283a 	ret

000045d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    45d0:	defffe04 	addi	sp,sp,-8
    45d4:	dfc00115 	stw	ra,4(sp)
    45d8:	df000015 	stw	fp,0(sp)
    45dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    45e0:	d0a00717 	ldw	r2,-32740(gp)
    45e4:	10000326 	beq	r2,zero,45f4 <alt_get_errno+0x24>
    45e8:	d0a00717 	ldw	r2,-32740(gp)
    45ec:	103ee83a 	callr	r2
    45f0:	00000106 	br	45f8 <alt_get_errno+0x28>
    45f4:	d0a0c404 	addi	r2,gp,-31984
}
    45f8:	e037883a 	mov	sp,fp
    45fc:	dfc00117 	ldw	ra,4(sp)
    4600:	df000017 	ldw	fp,0(sp)
    4604:	dec00204 	addi	sp,sp,8
    4608:	f800283a 	ret

0000460c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    460c:	defffb04 	addi	sp,sp,-20
    4610:	dfc00415 	stw	ra,16(sp)
    4614:	df000315 	stw	fp,12(sp)
    4618:	df000304 	addi	fp,sp,12
    461c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    4620:	e0bfff17 	ldw	r2,-4(fp)
    4624:	10000816 	blt	r2,zero,4648 <close+0x3c>
    4628:	01400304 	movi	r5,12
    462c:	e13fff17 	ldw	r4,-4(fp)
    4630:	00053400 	call	5340 <__mulsi3>
    4634:	1007883a 	mov	r3,r2
    4638:	00800034 	movhi	r2,0
    463c:	10951304 	addi	r2,r2,21580
    4640:	1885883a 	add	r2,r3,r2
    4644:	00000106 	br	464c <close+0x40>
    4648:	0005883a 	mov	r2,zero
    464c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    4650:	e0bffd17 	ldw	r2,-12(fp)
    4654:	10001926 	beq	r2,zero,46bc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    4658:	e0bffd17 	ldw	r2,-12(fp)
    465c:	10800017 	ldw	r2,0(r2)
    4660:	10800417 	ldw	r2,16(r2)
    4664:	10000626 	beq	r2,zero,4680 <close+0x74>
    4668:	e0bffd17 	ldw	r2,-12(fp)
    466c:	10800017 	ldw	r2,0(r2)
    4670:	10800417 	ldw	r2,16(r2)
    4674:	e13ffd17 	ldw	r4,-12(fp)
    4678:	103ee83a 	callr	r2
    467c:	00000106 	br	4684 <close+0x78>
    4680:	0005883a 	mov	r2,zero
    4684:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    4688:	e13fff17 	ldw	r4,-4(fp)
    468c:	0004cd40 	call	4cd4 <alt_release_fd>
    if (rval < 0)
    4690:	e0bffe17 	ldw	r2,-8(fp)
    4694:	1000070e 	bge	r2,zero,46b4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    4698:	00045d00 	call	45d0 <alt_get_errno>
    469c:	1007883a 	mov	r3,r2
    46a0:	e0bffe17 	ldw	r2,-8(fp)
    46a4:	0085c83a 	sub	r2,zero,r2
    46a8:	18800015 	stw	r2,0(r3)
      return -1;
    46ac:	00bfffc4 	movi	r2,-1
    46b0:	00000706 	br	46d0 <close+0xc4>
    }
    return 0;
    46b4:	0005883a 	mov	r2,zero
    46b8:	00000506 	br	46d0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    46bc:	00045d00 	call	45d0 <alt_get_errno>
    46c0:	1007883a 	mov	r3,r2
    46c4:	00801444 	movi	r2,81
    46c8:	18800015 	stw	r2,0(r3)
    return -1;
    46cc:	00bfffc4 	movi	r2,-1
  }
}
    46d0:	e037883a 	mov	sp,fp
    46d4:	dfc00117 	ldw	ra,4(sp)
    46d8:	df000017 	ldw	fp,0(sp)
    46dc:	dec00204 	addi	sp,sp,8
    46e0:	f800283a 	ret

000046e4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    46e4:	deffff04 	addi	sp,sp,-4
    46e8:	df000015 	stw	fp,0(sp)
    46ec:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    46f0:	0001883a 	nop
    46f4:	e037883a 	mov	sp,fp
    46f8:	df000017 	ldw	fp,0(sp)
    46fc:	dec00104 	addi	sp,sp,4
    4700:	f800283a 	ret

00004704 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    4704:	defffc04 	addi	sp,sp,-16
    4708:	df000315 	stw	fp,12(sp)
    470c:	df000304 	addi	fp,sp,12
    4710:	e13ffd15 	stw	r4,-12(fp)
    4714:	e17ffe15 	stw	r5,-8(fp)
    4718:	e1bfff15 	stw	r6,-4(fp)
  return len;
    471c:	e0bfff17 	ldw	r2,-4(fp)
}
    4720:	e037883a 	mov	sp,fp
    4724:	df000017 	ldw	fp,0(sp)
    4728:	dec00104 	addi	sp,sp,4
    472c:	f800283a 	ret

00004730 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4730:	defffe04 	addi	sp,sp,-8
    4734:	dfc00115 	stw	ra,4(sp)
    4738:	df000015 	stw	fp,0(sp)
    473c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4740:	d0a00717 	ldw	r2,-32740(gp)
    4744:	10000326 	beq	r2,zero,4754 <alt_get_errno+0x24>
    4748:	d0a00717 	ldw	r2,-32740(gp)
    474c:	103ee83a 	callr	r2
    4750:	00000106 	br	4758 <alt_get_errno+0x28>
    4754:	d0a0c404 	addi	r2,gp,-31984
}
    4758:	e037883a 	mov	sp,fp
    475c:	dfc00117 	ldw	ra,4(sp)
    4760:	df000017 	ldw	fp,0(sp)
    4764:	dec00204 	addi	sp,sp,8
    4768:	f800283a 	ret

0000476c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    476c:	defffa04 	addi	sp,sp,-24
    4770:	dfc00515 	stw	ra,20(sp)
    4774:	df000415 	stw	fp,16(sp)
    4778:	df000404 	addi	fp,sp,16
    477c:	e13ffe15 	stw	r4,-8(fp)
    4780:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    4784:	e0bffe17 	ldw	r2,-8(fp)
    4788:	10000326 	beq	r2,zero,4798 <alt_dev_llist_insert+0x2c>
    478c:	e0bffe17 	ldw	r2,-8(fp)
    4790:	10800217 	ldw	r2,8(r2)
    4794:	1000061e 	bne	r2,zero,47b0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    4798:	00047300 	call	4730 <alt_get_errno>
    479c:	1007883a 	mov	r3,r2
    47a0:	00800584 	movi	r2,22
    47a4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    47a8:	00bffa84 	movi	r2,-22
    47ac:	00001306 	br	47fc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    47b0:	e0bffe17 	ldw	r2,-8(fp)
    47b4:	e0ffff17 	ldw	r3,-4(fp)
    47b8:	e0fffc15 	stw	r3,-16(fp)
    47bc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    47c0:	e0bffd17 	ldw	r2,-12(fp)
    47c4:	e0fffc17 	ldw	r3,-16(fp)
    47c8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    47cc:	e0bffc17 	ldw	r2,-16(fp)
    47d0:	10c00017 	ldw	r3,0(r2)
    47d4:	e0bffd17 	ldw	r2,-12(fp)
    47d8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    47dc:	e0bffc17 	ldw	r2,-16(fp)
    47e0:	10800017 	ldw	r2,0(r2)
    47e4:	e0fffd17 	ldw	r3,-12(fp)
    47e8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    47ec:	e0bffc17 	ldw	r2,-16(fp)
    47f0:	e0fffd17 	ldw	r3,-12(fp)
    47f4:	10c00015 	stw	r3,0(r2)

  return 0;  
    47f8:	0005883a 	mov	r2,zero
}
    47fc:	e037883a 	mov	sp,fp
    4800:	dfc00117 	ldw	ra,4(sp)
    4804:	df000017 	ldw	fp,0(sp)
    4808:	dec00204 	addi	sp,sp,8
    480c:	f800283a 	ret

00004810 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    4810:	defffd04 	addi	sp,sp,-12
    4814:	dfc00215 	stw	ra,8(sp)
    4818:	df000115 	stw	fp,4(sp)
    481c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    4820:	00800034 	movhi	r2,0
    4824:	1094e604 	addi	r2,r2,21400
    4828:	e0bfff15 	stw	r2,-4(fp)
    482c:	00000606 	br	4848 <_do_ctors+0x38>
        (*ctor) (); 
    4830:	e0bfff17 	ldw	r2,-4(fp)
    4834:	10800017 	ldw	r2,0(r2)
    4838:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    483c:	e0bfff17 	ldw	r2,-4(fp)
    4840:	10bfff04 	addi	r2,r2,-4
    4844:	e0bfff15 	stw	r2,-4(fp)
    4848:	e0ffff17 	ldw	r3,-4(fp)
    484c:	00800034 	movhi	r2,0
    4850:	1094e704 	addi	r2,r2,21404
    4854:	18bff62e 	bgeu	r3,r2,4830 <_gp+0xffff7184>
        (*ctor) (); 
}
    4858:	0001883a 	nop
    485c:	e037883a 	mov	sp,fp
    4860:	dfc00117 	ldw	ra,4(sp)
    4864:	df000017 	ldw	fp,0(sp)
    4868:	dec00204 	addi	sp,sp,8
    486c:	f800283a 	ret

00004870 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    4870:	defffd04 	addi	sp,sp,-12
    4874:	dfc00215 	stw	ra,8(sp)
    4878:	df000115 	stw	fp,4(sp)
    487c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    4880:	00800034 	movhi	r2,0
    4884:	1094e604 	addi	r2,r2,21400
    4888:	e0bfff15 	stw	r2,-4(fp)
    488c:	00000606 	br	48a8 <_do_dtors+0x38>
        (*dtor) (); 
    4890:	e0bfff17 	ldw	r2,-4(fp)
    4894:	10800017 	ldw	r2,0(r2)
    4898:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    489c:	e0bfff17 	ldw	r2,-4(fp)
    48a0:	10bfff04 	addi	r2,r2,-4
    48a4:	e0bfff15 	stw	r2,-4(fp)
    48a8:	e0ffff17 	ldw	r3,-4(fp)
    48ac:	00800034 	movhi	r2,0
    48b0:	1094e704 	addi	r2,r2,21404
    48b4:	18bff62e 	bgeu	r3,r2,4890 <_gp+0xffff71e4>
        (*dtor) (); 
}
    48b8:	0001883a 	nop
    48bc:	e037883a 	mov	sp,fp
    48c0:	dfc00117 	ldw	ra,4(sp)
    48c4:	df000017 	ldw	fp,0(sp)
    48c8:	dec00204 	addi	sp,sp,8
    48cc:	f800283a 	ret

000048d0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    48d0:	deffff04 	addi	sp,sp,-4
    48d4:	df000015 	stw	fp,0(sp)
    48d8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    48dc:	0001883a 	nop
    48e0:	e037883a 	mov	sp,fp
    48e4:	df000017 	ldw	fp,0(sp)
    48e8:	dec00104 	addi	sp,sp,4
    48ec:	f800283a 	ret

000048f0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    48f0:	defff804 	addi	sp,sp,-32
    48f4:	dfc00715 	stw	ra,28(sp)
    48f8:	df000615 	stw	fp,24(sp)
    48fc:	dc000515 	stw	r16,20(sp)
    4900:	df000604 	addi	fp,sp,24
    4904:	e13ffb15 	stw	r4,-20(fp)
    4908:	e17ffc15 	stw	r5,-16(fp)
    490c:	e1bffd15 	stw	r6,-12(fp)
    4910:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    4914:	e1bffe17 	ldw	r6,-8(fp)
    4918:	e17ffd17 	ldw	r5,-12(fp)
    491c:	e13ffc17 	ldw	r4,-16(fp)
    4920:	0004b780 	call	4b78 <open>
    4924:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    4928:	e0bffa17 	ldw	r2,-24(fp)
    492c:	10002216 	blt	r2,zero,49b8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    4930:	04000034 	movhi	r16,0
    4934:	84151304 	addi	r16,r16,21580
    4938:	e0bffa17 	ldw	r2,-24(fp)
    493c:	01400304 	movi	r5,12
    4940:	1009883a 	mov	r4,r2
    4944:	00053400 	call	5340 <__mulsi3>
    4948:	8085883a 	add	r2,r16,r2
    494c:	10c00017 	ldw	r3,0(r2)
    4950:	e0bffb17 	ldw	r2,-20(fp)
    4954:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    4958:	04000034 	movhi	r16,0
    495c:	84151304 	addi	r16,r16,21580
    4960:	e0bffa17 	ldw	r2,-24(fp)
    4964:	01400304 	movi	r5,12
    4968:	1009883a 	mov	r4,r2
    496c:	00053400 	call	5340 <__mulsi3>
    4970:	8085883a 	add	r2,r16,r2
    4974:	10800104 	addi	r2,r2,4
    4978:	10c00017 	ldw	r3,0(r2)
    497c:	e0bffb17 	ldw	r2,-20(fp)
    4980:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    4984:	04000034 	movhi	r16,0
    4988:	84151304 	addi	r16,r16,21580
    498c:	e0bffa17 	ldw	r2,-24(fp)
    4990:	01400304 	movi	r5,12
    4994:	1009883a 	mov	r4,r2
    4998:	00053400 	call	5340 <__mulsi3>
    499c:	8085883a 	add	r2,r16,r2
    49a0:	10800204 	addi	r2,r2,8
    49a4:	10c00017 	ldw	r3,0(r2)
    49a8:	e0bffb17 	ldw	r2,-20(fp)
    49ac:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    49b0:	e13ffa17 	ldw	r4,-24(fp)
    49b4:	0004cd40 	call	4cd4 <alt_release_fd>
  }
} 
    49b8:	0001883a 	nop
    49bc:	e6ffff04 	addi	sp,fp,-4
    49c0:	dfc00217 	ldw	ra,8(sp)
    49c4:	df000117 	ldw	fp,4(sp)
    49c8:	dc000017 	ldw	r16,0(sp)
    49cc:	dec00304 	addi	sp,sp,12
    49d0:	f800283a 	ret

000049d4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    49d4:	defffb04 	addi	sp,sp,-20
    49d8:	dfc00415 	stw	ra,16(sp)
    49dc:	df000315 	stw	fp,12(sp)
    49e0:	df000304 	addi	fp,sp,12
    49e4:	e13ffd15 	stw	r4,-12(fp)
    49e8:	e17ffe15 	stw	r5,-8(fp)
    49ec:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    49f0:	01c07fc4 	movi	r7,511
    49f4:	01800044 	movi	r6,1
    49f8:	e17ffd17 	ldw	r5,-12(fp)
    49fc:	01000034 	movhi	r4,0
    4a00:	21151604 	addi	r4,r4,21592
    4a04:	00048f00 	call	48f0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    4a08:	01c07fc4 	movi	r7,511
    4a0c:	000d883a 	mov	r6,zero
    4a10:	e17ffe17 	ldw	r5,-8(fp)
    4a14:	01000034 	movhi	r4,0
    4a18:	21151304 	addi	r4,r4,21580
    4a1c:	00048f00 	call	48f0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    4a20:	01c07fc4 	movi	r7,511
    4a24:	01800044 	movi	r6,1
    4a28:	e17fff17 	ldw	r5,-4(fp)
    4a2c:	01000034 	movhi	r4,0
    4a30:	21151904 	addi	r4,r4,21604
    4a34:	00048f00 	call	48f0 <alt_open_fd>
}  
    4a38:	0001883a 	nop
    4a3c:	e037883a 	mov	sp,fp
    4a40:	dfc00117 	ldw	ra,4(sp)
    4a44:	df000017 	ldw	fp,0(sp)
    4a48:	dec00204 	addi	sp,sp,8
    4a4c:	f800283a 	ret

00004a50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4a50:	defffe04 	addi	sp,sp,-8
    4a54:	dfc00115 	stw	ra,4(sp)
    4a58:	df000015 	stw	fp,0(sp)
    4a5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4a60:	d0a00717 	ldw	r2,-32740(gp)
    4a64:	10000326 	beq	r2,zero,4a74 <alt_get_errno+0x24>
    4a68:	d0a00717 	ldw	r2,-32740(gp)
    4a6c:	103ee83a 	callr	r2
    4a70:	00000106 	br	4a78 <alt_get_errno+0x28>
    4a74:	d0a0c404 	addi	r2,gp,-31984
}
    4a78:	e037883a 	mov	sp,fp
    4a7c:	dfc00117 	ldw	ra,4(sp)
    4a80:	df000017 	ldw	fp,0(sp)
    4a84:	dec00204 	addi	sp,sp,8
    4a88:	f800283a 	ret

00004a8c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    4a8c:	defffb04 	addi	sp,sp,-20
    4a90:	dfc00415 	stw	ra,16(sp)
    4a94:	df000315 	stw	fp,12(sp)
    4a98:	dc000215 	stw	r16,8(sp)
    4a9c:	df000304 	addi	fp,sp,12
    4aa0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    4aa4:	e0bffe17 	ldw	r2,-8(fp)
    4aa8:	10800217 	ldw	r2,8(r2)
    4aac:	10d00034 	orhi	r3,r2,16384
    4ab0:	e0bffe17 	ldw	r2,-8(fp)
    4ab4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    4ab8:	e03ffd15 	stw	zero,-12(fp)
    4abc:	00002306 	br	4b4c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    4ac0:	04000034 	movhi	r16,0
    4ac4:	84151304 	addi	r16,r16,21580
    4ac8:	e0bffd17 	ldw	r2,-12(fp)
    4acc:	01400304 	movi	r5,12
    4ad0:	1009883a 	mov	r4,r2
    4ad4:	00053400 	call	5340 <__mulsi3>
    4ad8:	8085883a 	add	r2,r16,r2
    4adc:	10c00017 	ldw	r3,0(r2)
    4ae0:	e0bffe17 	ldw	r2,-8(fp)
    4ae4:	10800017 	ldw	r2,0(r2)
    4ae8:	1880151e 	bne	r3,r2,4b40 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    4aec:	04000034 	movhi	r16,0
    4af0:	84151304 	addi	r16,r16,21580
    4af4:	e0bffd17 	ldw	r2,-12(fp)
    4af8:	01400304 	movi	r5,12
    4afc:	1009883a 	mov	r4,r2
    4b00:	00053400 	call	5340 <__mulsi3>
    4b04:	8085883a 	add	r2,r16,r2
    4b08:	10800204 	addi	r2,r2,8
    4b0c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    4b10:	10000b0e 	bge	r2,zero,4b40 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    4b14:	01400304 	movi	r5,12
    4b18:	e13ffd17 	ldw	r4,-12(fp)
    4b1c:	00053400 	call	5340 <__mulsi3>
    4b20:	1007883a 	mov	r3,r2
    4b24:	00800034 	movhi	r2,0
    4b28:	10951304 	addi	r2,r2,21580
    4b2c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    4b30:	e0bffe17 	ldw	r2,-8(fp)
    4b34:	18800226 	beq	r3,r2,4b40 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    4b38:	00bffcc4 	movi	r2,-13
    4b3c:	00000806 	br	4b60 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    4b40:	e0bffd17 	ldw	r2,-12(fp)
    4b44:	10800044 	addi	r2,r2,1
    4b48:	e0bffd15 	stw	r2,-12(fp)
    4b4c:	d0a00617 	ldw	r2,-32744(gp)
    4b50:	1007883a 	mov	r3,r2
    4b54:	e0bffd17 	ldw	r2,-12(fp)
    4b58:	18bfd92e 	bgeu	r3,r2,4ac0 <_gp+0xffff7414>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    4b5c:	0005883a 	mov	r2,zero
}
    4b60:	e6ffff04 	addi	sp,fp,-4
    4b64:	dfc00217 	ldw	ra,8(sp)
    4b68:	df000117 	ldw	fp,4(sp)
    4b6c:	dc000017 	ldw	r16,0(sp)
    4b70:	dec00304 	addi	sp,sp,12
    4b74:	f800283a 	ret

00004b78 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    4b78:	defff604 	addi	sp,sp,-40
    4b7c:	dfc00915 	stw	ra,36(sp)
    4b80:	df000815 	stw	fp,32(sp)
    4b84:	df000804 	addi	fp,sp,32
    4b88:	e13ffd15 	stw	r4,-12(fp)
    4b8c:	e17ffe15 	stw	r5,-8(fp)
    4b90:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    4b94:	00bfffc4 	movi	r2,-1
    4b98:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    4b9c:	00bffb44 	movi	r2,-19
    4ba0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    4ba4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    4ba8:	d1600404 	addi	r5,gp,-32752
    4bac:	e13ffd17 	ldw	r4,-12(fp)
    4bb0:	0004d7c0 	call	4d7c <alt_find_dev>
    4bb4:	e0bff815 	stw	r2,-32(fp)
    4bb8:	e0bff817 	ldw	r2,-32(fp)
    4bbc:	1000051e 	bne	r2,zero,4bd4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    4bc0:	e13ffd17 	ldw	r4,-12(fp)
    4bc4:	0004e0c0 	call	4e0c <alt_find_file>
    4bc8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    4bcc:	00800044 	movi	r2,1
    4bd0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    4bd4:	e0bff817 	ldw	r2,-32(fp)
    4bd8:	10002b26 	beq	r2,zero,4c88 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    4bdc:	e13ff817 	ldw	r4,-32(fp)
    4be0:	0004f140 	call	4f14 <alt_get_fd>
    4be4:	e0bff915 	stw	r2,-28(fp)
    4be8:	e0bff917 	ldw	r2,-28(fp)
    4bec:	1000030e 	bge	r2,zero,4bfc <open+0x84>
    {
      status = index;
    4bf0:	e0bff917 	ldw	r2,-28(fp)
    4bf4:	e0bffa15 	stw	r2,-24(fp)
    4bf8:	00002506 	br	4c90 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    4bfc:	01400304 	movi	r5,12
    4c00:	e13ff917 	ldw	r4,-28(fp)
    4c04:	00053400 	call	5340 <__mulsi3>
    4c08:	1007883a 	mov	r3,r2
    4c0c:	00800034 	movhi	r2,0
    4c10:	10951304 	addi	r2,r2,21580
    4c14:	1885883a 	add	r2,r3,r2
    4c18:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    4c1c:	e0fffe17 	ldw	r3,-8(fp)
    4c20:	00900034 	movhi	r2,16384
    4c24:	10bfffc4 	addi	r2,r2,-1
    4c28:	1886703a 	and	r3,r3,r2
    4c2c:	e0bffc17 	ldw	r2,-16(fp)
    4c30:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    4c34:	e0bffb17 	ldw	r2,-20(fp)
    4c38:	1000051e 	bne	r2,zero,4c50 <open+0xd8>
    4c3c:	e13ffc17 	ldw	r4,-16(fp)
    4c40:	0004a8c0 	call	4a8c <alt_file_locked>
    4c44:	e0bffa15 	stw	r2,-24(fp)
    4c48:	e0bffa17 	ldw	r2,-24(fp)
    4c4c:	10001016 	blt	r2,zero,4c90 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    4c50:	e0bff817 	ldw	r2,-32(fp)
    4c54:	10800317 	ldw	r2,12(r2)
    4c58:	10000826 	beq	r2,zero,4c7c <open+0x104>
    4c5c:	e0bff817 	ldw	r2,-32(fp)
    4c60:	10800317 	ldw	r2,12(r2)
    4c64:	e1ffff17 	ldw	r7,-4(fp)
    4c68:	e1bffe17 	ldw	r6,-8(fp)
    4c6c:	e17ffd17 	ldw	r5,-12(fp)
    4c70:	e13ffc17 	ldw	r4,-16(fp)
    4c74:	103ee83a 	callr	r2
    4c78:	00000106 	br	4c80 <open+0x108>
    4c7c:	0005883a 	mov	r2,zero
    4c80:	e0bffa15 	stw	r2,-24(fp)
    4c84:	00000206 	br	4c90 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    4c88:	00bffb44 	movi	r2,-19
    4c8c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    4c90:	e0bffa17 	ldw	r2,-24(fp)
    4c94:	1000090e 	bge	r2,zero,4cbc <open+0x144>
  {
    alt_release_fd (index);  
    4c98:	e13ff917 	ldw	r4,-28(fp)
    4c9c:	0004cd40 	call	4cd4 <alt_release_fd>
    ALT_ERRNO = -status;
    4ca0:	0004a500 	call	4a50 <alt_get_errno>
    4ca4:	1007883a 	mov	r3,r2
    4ca8:	e0bffa17 	ldw	r2,-24(fp)
    4cac:	0085c83a 	sub	r2,zero,r2
    4cb0:	18800015 	stw	r2,0(r3)
    return -1;
    4cb4:	00bfffc4 	movi	r2,-1
    4cb8:	00000106 	br	4cc0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    4cbc:	e0bff917 	ldw	r2,-28(fp)
}
    4cc0:	e037883a 	mov	sp,fp
    4cc4:	dfc00117 	ldw	ra,4(sp)
    4cc8:	df000017 	ldw	fp,0(sp)
    4ccc:	dec00204 	addi	sp,sp,8
    4cd0:	f800283a 	ret

00004cd4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    4cd4:	defffc04 	addi	sp,sp,-16
    4cd8:	dfc00315 	stw	ra,12(sp)
    4cdc:	df000215 	stw	fp,8(sp)
    4ce0:	dc000115 	stw	r16,4(sp)
    4ce4:	df000204 	addi	fp,sp,8
    4ce8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    4cec:	e0bffe17 	ldw	r2,-8(fp)
    4cf0:	108000d0 	cmplti	r2,r2,3
    4cf4:	1000111e 	bne	r2,zero,4d3c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    4cf8:	04000034 	movhi	r16,0
    4cfc:	84151304 	addi	r16,r16,21580
    4d00:	e0bffe17 	ldw	r2,-8(fp)
    4d04:	01400304 	movi	r5,12
    4d08:	1009883a 	mov	r4,r2
    4d0c:	00053400 	call	5340 <__mulsi3>
    4d10:	8085883a 	add	r2,r16,r2
    4d14:	10800204 	addi	r2,r2,8
    4d18:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    4d1c:	04000034 	movhi	r16,0
    4d20:	84151304 	addi	r16,r16,21580
    4d24:	e0bffe17 	ldw	r2,-8(fp)
    4d28:	01400304 	movi	r5,12
    4d2c:	1009883a 	mov	r4,r2
    4d30:	00053400 	call	5340 <__mulsi3>
    4d34:	8085883a 	add	r2,r16,r2
    4d38:	10000015 	stw	zero,0(r2)
  }
}
    4d3c:	0001883a 	nop
    4d40:	e6ffff04 	addi	sp,fp,-4
    4d44:	dfc00217 	ldw	ra,8(sp)
    4d48:	df000117 	ldw	fp,4(sp)
    4d4c:	dc000017 	ldw	r16,0(sp)
    4d50:	dec00304 	addi	sp,sp,12
    4d54:	f800283a 	ret

00004d58 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    4d58:	deffff04 	addi	sp,sp,-4
    4d5c:	df000015 	stw	fp,0(sp)
    4d60:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    4d64:	000170fa 	wrctl	ienable,zero
}
    4d68:	0001883a 	nop
    4d6c:	e037883a 	mov	sp,fp
    4d70:	df000017 	ldw	fp,0(sp)
    4d74:	dec00104 	addi	sp,sp,4
    4d78:	f800283a 	ret

00004d7c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    4d7c:	defffa04 	addi	sp,sp,-24
    4d80:	dfc00515 	stw	ra,20(sp)
    4d84:	df000415 	stw	fp,16(sp)
    4d88:	df000404 	addi	fp,sp,16
    4d8c:	e13ffe15 	stw	r4,-8(fp)
    4d90:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    4d94:	e0bfff17 	ldw	r2,-4(fp)
    4d98:	10800017 	ldw	r2,0(r2)
    4d9c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    4da0:	e13ffe17 	ldw	r4,-8(fp)
    4da4:	000503c0 	call	503c <strlen>
    4da8:	10800044 	addi	r2,r2,1
    4dac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    4db0:	00000d06 	br	4de8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    4db4:	e0bffc17 	ldw	r2,-16(fp)
    4db8:	10800217 	ldw	r2,8(r2)
    4dbc:	e0fffd17 	ldw	r3,-12(fp)
    4dc0:	180d883a 	mov	r6,r3
    4dc4:	e17ffe17 	ldw	r5,-8(fp)
    4dc8:	1009883a 	mov	r4,r2
    4dcc:	000500c0 	call	500c <memcmp>
    4dd0:	1000021e 	bne	r2,zero,4ddc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    4dd4:	e0bffc17 	ldw	r2,-16(fp)
    4dd8:	00000706 	br	4df8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    4ddc:	e0bffc17 	ldw	r2,-16(fp)
    4de0:	10800017 	ldw	r2,0(r2)
    4de4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    4de8:	e0fffc17 	ldw	r3,-16(fp)
    4dec:	e0bfff17 	ldw	r2,-4(fp)
    4df0:	18bff01e 	bne	r3,r2,4db4 <_gp+0xffff7708>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    4df4:	0005883a 	mov	r2,zero
}
    4df8:	e037883a 	mov	sp,fp
    4dfc:	dfc00117 	ldw	ra,4(sp)
    4e00:	df000017 	ldw	fp,0(sp)
    4e04:	dec00204 	addi	sp,sp,8
    4e08:	f800283a 	ret

00004e0c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    4e0c:	defffb04 	addi	sp,sp,-20
    4e10:	dfc00415 	stw	ra,16(sp)
    4e14:	df000315 	stw	fp,12(sp)
    4e18:	df000304 	addi	fp,sp,12
    4e1c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    4e20:	d0a00217 	ldw	r2,-32760(gp)
    4e24:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    4e28:	00003106 	br	4ef0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    4e2c:	e0bffd17 	ldw	r2,-12(fp)
    4e30:	10800217 	ldw	r2,8(r2)
    4e34:	1009883a 	mov	r4,r2
    4e38:	000503c0 	call	503c <strlen>
    4e3c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    4e40:	e0bffd17 	ldw	r2,-12(fp)
    4e44:	10c00217 	ldw	r3,8(r2)
    4e48:	e0bffe17 	ldw	r2,-8(fp)
    4e4c:	10bfffc4 	addi	r2,r2,-1
    4e50:	1885883a 	add	r2,r3,r2
    4e54:	10800003 	ldbu	r2,0(r2)
    4e58:	10803fcc 	andi	r2,r2,255
    4e5c:	1080201c 	xori	r2,r2,128
    4e60:	10bfe004 	addi	r2,r2,-128
    4e64:	10800bd8 	cmpnei	r2,r2,47
    4e68:	1000031e 	bne	r2,zero,4e78 <alt_find_file+0x6c>
    {
      len -= 1;
    4e6c:	e0bffe17 	ldw	r2,-8(fp)
    4e70:	10bfffc4 	addi	r2,r2,-1
    4e74:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    4e78:	e0bffe17 	ldw	r2,-8(fp)
    4e7c:	e0ffff17 	ldw	r3,-4(fp)
    4e80:	1885883a 	add	r2,r3,r2
    4e84:	10800003 	ldbu	r2,0(r2)
    4e88:	10803fcc 	andi	r2,r2,255
    4e8c:	1080201c 	xori	r2,r2,128
    4e90:	10bfe004 	addi	r2,r2,-128
    4e94:	10800be0 	cmpeqi	r2,r2,47
    4e98:	1000081e 	bne	r2,zero,4ebc <alt_find_file+0xb0>
    4e9c:	e0bffe17 	ldw	r2,-8(fp)
    4ea0:	e0ffff17 	ldw	r3,-4(fp)
    4ea4:	1885883a 	add	r2,r3,r2
    4ea8:	10800003 	ldbu	r2,0(r2)
    4eac:	10803fcc 	andi	r2,r2,255
    4eb0:	1080201c 	xori	r2,r2,128
    4eb4:	10bfe004 	addi	r2,r2,-128
    4eb8:	10000a1e 	bne	r2,zero,4ee4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    4ebc:	e0bffd17 	ldw	r2,-12(fp)
    4ec0:	10800217 	ldw	r2,8(r2)
    4ec4:	e0fffe17 	ldw	r3,-8(fp)
    4ec8:	180d883a 	mov	r6,r3
    4ecc:	e17fff17 	ldw	r5,-4(fp)
    4ed0:	1009883a 	mov	r4,r2
    4ed4:	000500c0 	call	500c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    4ed8:	1000021e 	bne	r2,zero,4ee4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    4edc:	e0bffd17 	ldw	r2,-12(fp)
    4ee0:	00000706 	br	4f00 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    4ee4:	e0bffd17 	ldw	r2,-12(fp)
    4ee8:	10800017 	ldw	r2,0(r2)
    4eec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    4ef0:	e0fffd17 	ldw	r3,-12(fp)
    4ef4:	d0a00204 	addi	r2,gp,-32760
    4ef8:	18bfcc1e 	bne	r3,r2,4e2c <_gp+0xffff7780>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    4efc:	0005883a 	mov	r2,zero
}
    4f00:	e037883a 	mov	sp,fp
    4f04:	dfc00117 	ldw	ra,4(sp)
    4f08:	df000017 	ldw	fp,0(sp)
    4f0c:	dec00204 	addi	sp,sp,8
    4f10:	f800283a 	ret

00004f14 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    4f14:	defffa04 	addi	sp,sp,-24
    4f18:	dfc00515 	stw	ra,20(sp)
    4f1c:	df000415 	stw	fp,16(sp)
    4f20:	dc000315 	stw	r16,12(sp)
    4f24:	df000404 	addi	fp,sp,16
    4f28:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    4f2c:	00bffa04 	movi	r2,-24
    4f30:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    4f34:	e03ffc15 	stw	zero,-16(fp)
    4f38:	00001d06 	br	4fb0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    4f3c:	04000034 	movhi	r16,0
    4f40:	84151304 	addi	r16,r16,21580
    4f44:	e0bffc17 	ldw	r2,-16(fp)
    4f48:	01400304 	movi	r5,12
    4f4c:	1009883a 	mov	r4,r2
    4f50:	00053400 	call	5340 <__mulsi3>
    4f54:	8085883a 	add	r2,r16,r2
    4f58:	10800017 	ldw	r2,0(r2)
    4f5c:	1000111e 	bne	r2,zero,4fa4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    4f60:	04000034 	movhi	r16,0
    4f64:	84151304 	addi	r16,r16,21580
    4f68:	e0bffc17 	ldw	r2,-16(fp)
    4f6c:	01400304 	movi	r5,12
    4f70:	1009883a 	mov	r4,r2
    4f74:	00053400 	call	5340 <__mulsi3>
    4f78:	8085883a 	add	r2,r16,r2
    4f7c:	e0fffe17 	ldw	r3,-8(fp)
    4f80:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    4f84:	d0e00617 	ldw	r3,-32744(gp)
    4f88:	e0bffc17 	ldw	r2,-16(fp)
    4f8c:	1880020e 	bge	r3,r2,4f98 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    4f90:	e0bffc17 	ldw	r2,-16(fp)
    4f94:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
    4f98:	e0bffc17 	ldw	r2,-16(fp)
    4f9c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    4fa0:	00000606 	br	4fbc <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    4fa4:	e0bffc17 	ldw	r2,-16(fp)
    4fa8:	10800044 	addi	r2,r2,1
    4fac:	e0bffc15 	stw	r2,-16(fp)
    4fb0:	e0bffc17 	ldw	r2,-16(fp)
    4fb4:	10800810 	cmplti	r2,r2,32
    4fb8:	103fe01e 	bne	r2,zero,4f3c <_gp+0xffff7890>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    4fbc:	e0bffd17 	ldw	r2,-12(fp)
}
    4fc0:	e6ffff04 	addi	sp,fp,-4
    4fc4:	dfc00217 	ldw	ra,8(sp)
    4fc8:	df000117 	ldw	fp,4(sp)
    4fcc:	dc000017 	ldw	r16,0(sp)
    4fd0:	dec00304 	addi	sp,sp,12
    4fd4:	f800283a 	ret

00004fd8 <atexit>:
    4fd8:	200b883a 	mov	r5,r4
    4fdc:	000f883a 	mov	r7,zero
    4fe0:	000d883a 	mov	r6,zero
    4fe4:	0009883a 	mov	r4,zero
    4fe8:	00050581 	jmpi	5058 <__register_exitproc>

00004fec <exit>:
    4fec:	defffe04 	addi	sp,sp,-8
    4ff0:	000b883a 	mov	r5,zero
    4ff4:	dc000015 	stw	r16,0(sp)
    4ff8:	dfc00115 	stw	ra,4(sp)
    4ffc:	2021883a 	mov	r16,r4
    5000:	00051b00 	call	51b0 <__call_exitprocs>
    5004:	8009883a 	mov	r4,r16
    5008:	00053680 	call	5368 <_exit>

0000500c <memcmp>:
    500c:	218d883a 	add	r6,r4,r6
    5010:	21800826 	beq	r4,r6,5034 <memcmp+0x28>
    5014:	20800003 	ldbu	r2,0(r4)
    5018:	28c00003 	ldbu	r3,0(r5)
    501c:	10c00226 	beq	r2,r3,5028 <memcmp+0x1c>
    5020:	10c5c83a 	sub	r2,r2,r3
    5024:	f800283a 	ret
    5028:	21000044 	addi	r4,r4,1
    502c:	29400044 	addi	r5,r5,1
    5030:	003ff706 	br	5010 <_gp+0xffff7964>
    5034:	0005883a 	mov	r2,zero
    5038:	f800283a 	ret

0000503c <strlen>:
    503c:	2005883a 	mov	r2,r4
    5040:	10c00007 	ldb	r3,0(r2)
    5044:	18000226 	beq	r3,zero,5050 <strlen+0x14>
    5048:	10800044 	addi	r2,r2,1
    504c:	003ffc06 	br	5040 <_gp+0xffff7994>
    5050:	1105c83a 	sub	r2,r2,r4
    5054:	f800283a 	ret

00005058 <__register_exitproc>:
    5058:	00800034 	movhi	r2,0
    505c:	1095b304 	addi	r2,r2,22220
    5060:	10c00017 	ldw	r3,0(r2)
    5064:	defff904 	addi	sp,sp,-28
    5068:	dc000015 	stw	r16,0(sp)
    506c:	1c000c17 	ldw	r16,48(r3)
    5070:	dd400515 	stw	r21,20(sp)
    5074:	dd000415 	stw	r20,16(sp)
    5078:	dcc00315 	stw	r19,12(sp)
    507c:	dc800215 	stw	r18,8(sp)
    5080:	dc400115 	stw	r17,4(sp)
    5084:	dfc00615 	stw	ra,24(sp)
    5088:	202b883a 	mov	r21,r4
    508c:	2823883a 	mov	r17,r5
    5090:	3027883a 	mov	r19,r6
    5094:	3825883a 	mov	r18,r7
    5098:	1029883a 	mov	r20,r2
    509c:	8000021e 	bne	r16,zero,50a8 <__register_exitproc+0x50>
    50a0:	1c000d04 	addi	r16,r3,52
    50a4:	1c000c15 	stw	r16,48(r3)
    50a8:	80800117 	ldw	r2,4(r16)
    50ac:	00c007c4 	movi	r3,31
    50b0:	1880110e 	bge	r3,r2,50f8 <__register_exitproc+0xa0>
    50b4:	00800034 	movhi	r2,0
    50b8:	10800004 	addi	r2,r2,0
    50bc:	1000021e 	bne	r2,zero,50c8 <__register_exitproc+0x70>
    50c0:	00bfffc4 	movi	r2,-1
    50c4:	00003106 	br	518c <__register_exitproc+0x134>
    50c8:	01002304 	movi	r4,140
    50cc:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x4000>
    50d0:	1021883a 	mov	r16,r2
    50d4:	103ffa26 	beq	r2,zero,50c0 <_gp+0xffff7a14>
    50d8:	10000115 	stw	zero,4(r2)
    50dc:	a0800017 	ldw	r2,0(r20)
    50e0:	10c00c17 	ldw	r3,48(r2)
    50e4:	80c00015 	stw	r3,0(r16)
    50e8:	14000c15 	stw	r16,48(r2)
    50ec:	80002215 	stw	zero,136(r16)
    50f0:	a8001d26 	beq	r21,zero,5168 <__register_exitproc+0x110>
    50f4:	00000606 	br	5110 <__register_exitproc+0xb8>
    50f8:	a8001b26 	beq	r21,zero,5168 <__register_exitproc+0x110>
    50fc:	80802217 	ldw	r2,136(r16)
    5100:	1000091e 	bne	r2,zero,5128 <__register_exitproc+0xd0>
    5104:	00800034 	movhi	r2,0
    5108:	10800004 	addi	r2,r2,0
    510c:	103fec26 	beq	r2,zero,50c0 <_gp+0xffff7a14>
    5110:	01004204 	movi	r4,264
    5114:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x4000>
    5118:	103fe926 	beq	r2,zero,50c0 <_gp+0xffff7a14>
    511c:	10004015 	stw	zero,256(r2)
    5120:	10004115 	stw	zero,260(r2)
    5124:	80802215 	stw	r2,136(r16)
    5128:	81400117 	ldw	r5,4(r16)
    512c:	01000044 	movi	r4,1
    5130:	2947883a 	add	r3,r5,r5
    5134:	18c7883a 	add	r3,r3,r3
    5138:	10c7883a 	add	r3,r2,r3
    513c:	1cc00015 	stw	r19,0(r3)
    5140:	2148983a 	sll	r4,r4,r5
    5144:	11404017 	ldw	r5,256(r2)
    5148:	290ab03a 	or	r5,r5,r4
    514c:	11404015 	stw	r5,256(r2)
    5150:	1c802015 	stw	r18,128(r3)
    5154:	00c00084 	movi	r3,2
    5158:	a8c0031e 	bne	r21,r3,5168 <__register_exitproc+0x110>
    515c:	10c04117 	ldw	r3,260(r2)
    5160:	1908b03a 	or	r4,r3,r4
    5164:	11004115 	stw	r4,260(r2)
    5168:	80800117 	ldw	r2,4(r16)
    516c:	10c00044 	addi	r3,r2,1
    5170:	10800084 	addi	r2,r2,2
    5174:	1085883a 	add	r2,r2,r2
    5178:	1085883a 	add	r2,r2,r2
    517c:	80c00115 	stw	r3,4(r16)
    5180:	80a1883a 	add	r16,r16,r2
    5184:	84400015 	stw	r17,0(r16)
    5188:	0005883a 	mov	r2,zero
    518c:	dfc00617 	ldw	ra,24(sp)
    5190:	dd400517 	ldw	r21,20(sp)
    5194:	dd000417 	ldw	r20,16(sp)
    5198:	dcc00317 	ldw	r19,12(sp)
    519c:	dc800217 	ldw	r18,8(sp)
    51a0:	dc400117 	ldw	r17,4(sp)
    51a4:	dc000017 	ldw	r16,0(sp)
    51a8:	dec00704 	addi	sp,sp,28
    51ac:	f800283a 	ret

000051b0 <__call_exitprocs>:
    51b0:	defff504 	addi	sp,sp,-44
    51b4:	dd000515 	stw	r20,20(sp)
    51b8:	05000034 	movhi	r20,0
    51bc:	dc800315 	stw	r18,12(sp)
    51c0:	dfc00a15 	stw	ra,40(sp)
    51c4:	df000915 	stw	fp,36(sp)
    51c8:	ddc00815 	stw	r23,32(sp)
    51cc:	dd800715 	stw	r22,28(sp)
    51d0:	dd400615 	stw	r21,24(sp)
    51d4:	dcc00415 	stw	r19,16(sp)
    51d8:	dc400215 	stw	r17,8(sp)
    51dc:	dc000115 	stw	r16,4(sp)
    51e0:	d9000015 	stw	r4,0(sp)
    51e4:	2825883a 	mov	r18,r5
    51e8:	a515b304 	addi	r20,r20,22220
    51ec:	a4400017 	ldw	r17,0(r20)
    51f0:	8cc00c17 	ldw	r19,48(r17)
    51f4:	8c400c04 	addi	r17,r17,48
    51f8:	98004526 	beq	r19,zero,5310 <__call_exitprocs+0x160>
    51fc:	9c000117 	ldw	r16,4(r19)
    5200:	00900034 	movhi	r2,16384
    5204:	10bfffc4 	addi	r2,r2,-1
    5208:	9d402217 	ldw	r21,136(r19)
    520c:	85bfffc4 	addi	r22,r16,-1
    5210:	80a1883a 	add	r16,r16,r2
    5214:	8421883a 	add	r16,r16,r16
    5218:	8421883a 	add	r16,r16,r16
    521c:	ac2f883a 	add	r23,r21,r16
    5220:	84000204 	addi	r16,r16,8
    5224:	9c21883a 	add	r16,r19,r16
    5228:	b0002716 	blt	r22,zero,52c8 <__call_exitprocs+0x118>
    522c:	90000726 	beq	r18,zero,524c <__call_exitprocs+0x9c>
    5230:	a800041e 	bne	r21,zero,5244 <__call_exitprocs+0x94>
    5234:	b5bfffc4 	addi	r22,r22,-1
    5238:	bdffff04 	addi	r23,r23,-4
    523c:	843fff04 	addi	r16,r16,-4
    5240:	003ff906 	br	5228 <_gp+0xffff7b7c>
    5244:	b9002017 	ldw	r4,128(r23)
    5248:	913ffa1e 	bne	r18,r4,5234 <_gp+0xffff7b88>
    524c:	99000117 	ldw	r4,4(r19)
    5250:	82000017 	ldw	r8,0(r16)
    5254:	213fffc4 	addi	r4,r4,-1
    5258:	b100021e 	bne	r22,r4,5264 <__call_exitprocs+0xb4>
    525c:	9d800115 	stw	r22,4(r19)
    5260:	00000106 	br	5268 <__call_exitprocs+0xb8>
    5264:	80000015 	stw	zero,0(r16)
    5268:	403ff226 	beq	r8,zero,5234 <_gp+0xffff7b88>
    526c:	9f000117 	ldw	fp,4(r19)
    5270:	a8000526 	beq	r21,zero,5288 <__call_exitprocs+0xd8>
    5274:	00800044 	movi	r2,1
    5278:	1592983a 	sll	r9,r2,r22
    527c:	a9404017 	ldw	r5,256(r21)
    5280:	494a703a 	and	r5,r9,r5
    5284:	2800021e 	bne	r5,zero,5290 <__call_exitprocs+0xe0>
    5288:	403ee83a 	callr	r8
    528c:	00000906 	br	52b4 <__call_exitprocs+0x104>
    5290:	a9004117 	ldw	r4,260(r21)
    5294:	4908703a 	and	r4,r9,r4
    5298:	2000041e 	bne	r4,zero,52ac <__call_exitprocs+0xfc>
    529c:	b9400017 	ldw	r5,0(r23)
    52a0:	d9000017 	ldw	r4,0(sp)
    52a4:	403ee83a 	callr	r8
    52a8:	00000206 	br	52b4 <__call_exitprocs+0x104>
    52ac:	b9000017 	ldw	r4,0(r23)
    52b0:	403ee83a 	callr	r8
    52b4:	99000117 	ldw	r4,4(r19)
    52b8:	e13fcc1e 	bne	fp,r4,51ec <_gp+0xffff7b40>
    52bc:	89000017 	ldw	r4,0(r17)
    52c0:	993fdc26 	beq	r19,r4,5234 <_gp+0xffff7b88>
    52c4:	003fc906 	br	51ec <_gp+0xffff7b40>
    52c8:	00800034 	movhi	r2,0
    52cc:	10800004 	addi	r2,r2,0
    52d0:	10000f26 	beq	r2,zero,5310 <__call_exitprocs+0x160>
    52d4:	99400117 	ldw	r5,4(r19)
    52d8:	99000017 	ldw	r4,0(r19)
    52dc:	2800091e 	bne	r5,zero,5304 <__call_exitprocs+0x154>
    52e0:	20000826 	beq	r4,zero,5304 <__call_exitprocs+0x154>
    52e4:	89000015 	stw	r4,0(r17)
    52e8:	a8000226 	beq	r21,zero,52f4 <__call_exitprocs+0x144>
    52ec:	a809883a 	mov	r4,r21
    52f0:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x4000>
    52f4:	9809883a 	mov	r4,r19
    52f8:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x4000>
    52fc:	8cc00017 	ldw	r19,0(r17)
    5300:	003fbd06 	br	51f8 <_gp+0xffff7b4c>
    5304:	9823883a 	mov	r17,r19
    5308:	2027883a 	mov	r19,r4
    530c:	003fba06 	br	51f8 <_gp+0xffff7b4c>
    5310:	dfc00a17 	ldw	ra,40(sp)
    5314:	df000917 	ldw	fp,36(sp)
    5318:	ddc00817 	ldw	r23,32(sp)
    531c:	dd800717 	ldw	r22,28(sp)
    5320:	dd400617 	ldw	r21,24(sp)
    5324:	dd000517 	ldw	r20,20(sp)
    5328:	dcc00417 	ldw	r19,16(sp)
    532c:	dc800317 	ldw	r18,12(sp)
    5330:	dc400217 	ldw	r17,8(sp)
    5334:	dc000117 	ldw	r16,4(sp)
    5338:	dec00b04 	addi	sp,sp,44
    533c:	f800283a 	ret

00005340 <__mulsi3>:
    5340:	0005883a 	mov	r2,zero
    5344:	20000726 	beq	r4,zero,5364 <__mulsi3+0x24>
    5348:	20c0004c 	andi	r3,r4,1
    534c:	2008d07a 	srli	r4,r4,1
    5350:	18000126 	beq	r3,zero,5358 <__mulsi3+0x18>
    5354:	1145883a 	add	r2,r2,r5
    5358:	294b883a 	add	r5,r5,r5
    535c:	203ffa1e 	bne	r4,zero,5348 <_gp+0xffff7c9c>
    5360:	f800283a 	ret
    5364:	f800283a 	ret

00005368 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    5368:	defffd04 	addi	sp,sp,-12
    536c:	df000215 	stw	fp,8(sp)
    5370:	df000204 	addi	fp,sp,8
    5374:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    5378:	0001883a 	nop
    537c:	e0bfff17 	ldw	r2,-4(fp)
    5380:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    5384:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    5388:	10000226 	beq	r2,zero,5394 <_exit+0x2c>
    ALT_SIM_FAIL();
    538c:	002af070 	cmpltui	zero,zero,43969
    5390:	00000106 	br	5398 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    5394:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    5398:	003fff06 	br	5398 <_gp+0xffff7cec>
